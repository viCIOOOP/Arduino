                         Измерение информации

Любая память состоит из элементарных ячеек, которые имеют всего два состояния: 0 и 1.
Эта единица информации называется бит (bit). 

Стандартные типы переменных в Arduino по своему размеру кратны степени двойки:
1 байт = 8 бит = 256
2 байта = 16 бит = 65 536
4 байта = 32 бита = 4 294 967 296
_____________________________________________________________________________________________________________________

                         Типы данных
(*) - да, bool занимает 1 байт (8 бит), так как это минимальная адресуемая ячейка памяти. 
(**) - на ESP8266/ESP32 int и unsigned int занимает 4 байта, то есть является аналогами типов long и unsigned long
(***) - Компилятор также поддерживает 64 битные числа.
______________________________________________________________________________________________________________________

                         Целочисленные типы

Переменные целочисленных типов нужны для хранения целых чисел.

В своей программе рекомендуется использовать альтернативное название типов, потому что:
Проще ориентироваться в максимальных значениях

Легче запомнить

Название более короткое

Проще изменить один тип на другой

Размер переменной задан жёстко и не зависит от платформы

Максимальные значения хранятся в константах, которые можно использовать в коде.
подсказака:

UINT8_MAX - 255

INT8_MAX - 127

UINT16_MAX - 65 535

INT16_MAX - 32 767

UINT32_MAX- 4 294 967 295

INT32_MAX - 2 147 483 647

UINT64_MAX - 18 446 744 073 709 551 615

INT64_MAX - ‭9 223 372 036 854 775 807

__________________________________________________________________________________________________________________________

                          Логический тип

bool - логический, он же булевый тип данных, принимает значения 0 и 1 или false и true
bool принимает значение true, если присвоить ей любое отличное от нуля число.

bool a = 0;  // false

bool b = 1;  // true

___________________________________________________________________________________________________________________________

                         Символьный тип

char - тип данных для хранения символов, символ указывается в одинарных кавычках:
char var = 'a';. По факту это целочисленный тип данных, а переменная хранит номер (код) символа в таблице ASCI

Отдельный символьный тип данных нужен для удобства работы, чтобы программа могла понять разницу между числом и символом

___________________________________________________________________________________________________________________________

                           Символы и числа

бывает нужно конвертировать символы чисел в соответствующие им целые числа и наоборот (при работе со строками и буферами вручную), для этого распространены следующие алгоритмы:

Из символа в число - взять младший ниббл (4 бита): symbol & 0xF

Из символа в число - вычесть символ 0: symbol - '0'

Из числа в символ - прибавить символ 0: symbol + '0'

____________________________________________________________________________________________________________________________

                            Дробные числа

float - тип данных для чисел с плавающей точкой

В таблица есть пометка "точность сколько-то" - это означает, что в этом типе можно хранить числа, размер которых не больше столько-то  цифр, остальные цифры будут утеряны! 

Вот так это выглядит в числах (в комментарии - реальное число, которое записалось в переменную):

float v;
v = 123456.654321;    // 123456.656250
v = 0.0123456789;     // 0.0123456788
v = 0.0000123456789;  // 0.0000123456788
v = 123456789;        // 123456792.0

___________________________________________________________________________________________________________________________

                            Константы

Что такое константа понятно из её названия - что-то, значение чего мы можем только прочитать и не можем изменить. Задать константу можно двумя способами:

Как переменную, указав перед типом данных слово const: const тип_данных имя = значение;. Пример: const byte myConst = 10;.
По сути это будет обычная переменная, но её значение нельзя поменять.

Переменные, константы const и другие создаваемые пользователем данные имеют такое важное понятие, как область видимости. Она бывает глобальной и локальной.

Глобальная переменная:

Объявляется вне функций, например просто в начале программы.

Доступна для чтения и записи в любом месте программы.

Находится в оперативной памяти на всём протяжении работы программы, то есть не теряет своё значение.

При объявлении имеет нулевое значение.
Пример:

byte var;   // глобальная переменная
void setup() {
  var = 50;
}
void loop() {
  var = 70;
}

Локальная переменная:

Объявляется внутри любого блока кода, заключённого в { фигурные скобки }.

Доступна для чтения и записи только внутри своего блока кода (и во всех вложенных в него).

Находится в оперативной памяти с момента объявления и до закрывающей фигурной скобки, то есть удаляется из памяти и её значение стирается.


При объявлении имеет случайное значение.
Важный момент: если имя локальной переменной совпадает с одной из глобальных, то приоритет обращения отдаётся локальной переменной (в её области определения).
Пример:

byte var; // глобальная переменная
void setup() {
 byte var;  // локальная переменная
 var = 50;  // меняем локальную var
}
void loop() {
 var = 70;  // меняем глобальную var
}

________________________________________________________________________________________________________________________________________________________

                                                             Статические переменные
Вспомним, как работает обычная локальная переменная: при входе в свой блок кода локальная переменная создаётся заново, а при выходе - удаляется из памяти и теряет своё значение.

Если локальная переменная объявлена как static - она будет сохранять своё значение на всём протяжении работы программы
Пример:

void setup() {
}
void loop() {
  byte varL = 0;
  varL++;
  static byte varS = 0;
  varS++;
  // здесь varL всегда будет равна 1
  // а varS - постоянно увеличиваться
}




























